#!/bin/bash

################################################################################
#
#   CONFIGURE VERSIONS AND FOLDERS
#

ROOT_DIR=$HOME/revlibs
INSTALL_DIR=$ROOT_DIR/prefix
NDK=`pwd`/../../sdks/android-ndk
TOOLCHAIN="$NDK/toolchains/arm-linux-androideabi-4.4.3/prebuilt/darwin-x86/bin/arm-linux-androideabi"
PLATFORM="$NDK/platforms/android-8"
THIS_DIR=`pwd`

OPENSSL_VERSION=1.0.1e

echo "Will build into $ROOT_DIR"
mkdir -p $ROOT_DIR

echo "Will install into $INSTALL_DIR"
mkdir -p $INSTALL_DIR

ARCHS="armv6"

################################################################################
#
#   BUILD OPENSSL
#

OPENSSL_TGZ=$ROOT_DIR/openssl-$OPENSSL_VERSION.tar.gz
OPENSSL_SRC=$ROOT_DIR/openssl-$OPENSSL_VERSION

cd $ROOT_DIR

if [ ! -e $OPENSSL_TGZ ]; then
	echo "Fetching openssl-$OPENSSL_VERSION"
	#wget -nv http://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz
	curl http://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz -o openssl-$OPENSSL_VERSION.tar.gz
	if [ $? == 0 ]; then
		echo "  fetched to $OPENSSL_TGZ"
	else
		if [ -e $OPENSSL_TGZ ]; then rm $OPENSSL_TGZ; fi
		echo "  failed"
		exit
	fi
else
	echo "Found openssl-$OPENSSL_VERSION tgz at $ROOT_DIR"
fi

for ARCH in ${ARCHS}
do
	if [ "$ARCH" == "armv6" ]; then
		SPEC="android"
	else
		SPEC="android-armv7"
	fi

	OPENSSL_ARCH_SRC=$OPENSSL_SRC-android-$ARCH
	OPENSSL_ARCH_CONFIG="no-idea no-rc5 no-hw shared --prefix=$INSTALL_DIR/android/$ARCH $SPEC"
	OPENSSL_ARCH_LOG="$OPENSSL_ARCH_SRC.log"

	if [ ! -e $OPENSSL_ARCH_SRC ]; then
		echo "Unpacking openssl-$OPENSSL_VERSION for $ARCH"
		tar xf $OPENSSL_TGZ
		mv $OPENSSL_SRC $OPENSSL_ARCH_SRC
	fi

	if [ -e $OPENSSL_ARCH_SRC/config.cmd ]; then
		OPENSSL_ARCH_CURRENT_CONFIG=`cat $OPENSSL_ARCH_SRC/config.cmd`
	else
		OPENSSL_ARCH_CURRENT_CONFIG=
	fi

	if [ "$OPENSSL_ARCH_CONFIG" != "$OPENSSL_ARCH_CURRENT_CONFIG" ]; then
		cd $OPENSSL_ARCH_SRC
		
		echo "Configuring openssl-$OPENSSL_VERSION for $ARCH"
		export CC="$TOOLCHAIN-gcc"
		export CXX="$TOOLCHAIN-g++"
		export LINK=${CXX}
		export LD="$TOOLCHAIN-ld"
		export AR="$TOOLCHAIN-ar"
		export RANLIB="$TOOLCHAIN-ranlib"
		export STRIP="$TOOLCHAIN-strip"
		if [ "$ARCH" == "armv6" ]; then
			export ARCH_FLAGS="-mthumb"
			export ARCH_LINK=
		else
			export ARCH_FLAGS="-march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16"
			export ARCH_LINK="-march=armv7-a -Wl,--fix-cortex-a8"
		fi
		export CPPFLAGS=" ${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64 "
		export CXXFLAGS=" ${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64 -frtti -fexceptions "
		export CFLAGS=" ${ARCH_FLAGS} -fpic -ffunction-sections -funwind-tables -fstack-protector -fno-strict-aliasing -finline-limit=64 "
		export LDFLAGS=" ${ARCH_LINK} "
		./Configure $OPENSSL_ARCH_CONFIG > "${OPENSSL_ARCH_LOG}" 2>&1
		
		sed -i "" "s|MAKEDEPPROG=makedepend|MAKEDEPPROG=$TOOLCHAIN-gcc -M|g" Makefile Makefile.org

		echo "Building openssl-$OPENSSL_VERSION for $ARCH"
		export ANDROID_DEV="$PLATFORM/arch-arm/usr"
		make clean >> "${OPENSSL_ARCH_LOG}" 2>&1 && make depend  >> "${OPENSSL_ARCH_LOG}" 2>&1 && make >> "${OPENSSL_ARCH_LOG}" 2>&1 && make install_sw >> "${OPENSSL_ARCH_LOG}" 2>&1
		if [ $? == 0 ]; then
			echo "$OPENSSL_ARCH_CONFIG" > $OPENSSL_ARCH_SRC/config.cmd
		else
			echo "  failed"
			exit
		fi		

		cd ..
	else
		echo "Found build of openssl-$OPENSSL_VERSION for $ARCH"
	fi

	CRYPTO_LIBS+="$INSTALL_DIR/android/$ARCH/lib/libcrypto.a "
	SSL_LIBS+="$INSTALL_DIR/android/$ARCH/lib/libssl.a "
done

echo "Creating prebuilts"
mkdir -p "$THIS_DIR/../../prebuilt/lib/android"
cp $CRYPTO_LIBS "$THIS_DIR/../../prebuilt/lib/android/libcustomcrypto.a"
cp $SSL_LIBS "$THIS_DIR/../../prebuilt/lib/android/libcustomssl.a"

